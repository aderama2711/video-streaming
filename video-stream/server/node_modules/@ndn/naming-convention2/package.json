{
  "name": "@ndn/naming-convention2",
  "version": "0.0.20220309-nightly-b7077af",
  "description": "NDNts: Naming Convention rev2 and rev3",
  "keywords": [
    "NDN",
    "Named Data Networking"
  ],
  "author": "Junxiao Shi <npm@mail1.yoursunny.com>",
  "license": "ISC",
  "files": [
    "lib"
  ],
  "type": "module",
  "main": "lib/mod_node.js",
  "module": "lib/mod_browser.js",
  "sideEffects": false,
  "homepage": "https://yoursunny.com/p/NDNts/",
  "repository": {
    "type": "git",
    "url": "https://github.com/yoursunny/NDNts.git",
    "directory": "packages/naming-convention2"
  },
  "dependencies": {
    "@ndn/packet": "https://ndnts-nightly.ndn.today/packet.tgz",
    "@ndn/tlv": "https://ndnts-nightly.ndn.today/tlv.tgz",
    "tslib": "^2.3.1"
  },
  "types": "lib/mod.d.ts",
  "readme": "# @ndn/naming-convention2\n\nThis package is part of [NDNts](https://yoursunny.com/p/NDNts/), Named Data Networking libraries for the modern web.\n\nThis package implements NDN naming conventions based on typed components.\n\nThe current format, sometimes known as **rev3 format**, is specified in [NDN-TR-0022 revision 3](https://named-data.net/publications/techreports/ndn-tr-22-3-ndn-memo-naming-conventions/) and [Name Component Type Assignment rev28](https://redmine.named-data.net/projects/ndn-tlv/wiki/NameComponentType/28), published in 2021.\nIt is supported in most other libraries and recommended for new applications.\n\n```ts\nimport { Keyword, Version, Segment, AltUri } from \"@ndn/naming-convention2\";\n// We also have ByteOffset, Timestamp, SequenceNum.\n\n// other imports for examples\nimport { Name } from \"@ndn/packet\";\nimport { strict as assert } from \"node:assert\";\n\n// convention.create() returns a Component.\nlet name = new Name([\"A\", Keyword.create(\"metadata\")]);\nassert.equal(name.toString(), \"/8=A/32=metadata\");\n\n// name.append() has an overload for convention component.\nname = name.append(Version, 3);\nassert.equal(name.toString(), \"/8=A/32=metadata/54=%03\");\nname = name.append(Segment, 0);\nassert.equal(name.toString(), \"/8=A/32=metadata/54=%03/50=%00\");\n\n// convention.match() checks whether a Component follows the convention.\nassert.equal(Segment.match(name.at(-1)), true);\nassert.equal(Version.match(name.at(-1)), false);\n\n// Or you can use component.is().\nassert.equal(name.at(-1).is(Segment), true);\nassert.equal(name.at(-1).is(Version), false);\n\n// convention.parse() extracts the value from a Component.\nassert.equal(Keyword.parse(name.at(-3)), \"metadata\");\nassert.equal(Version.parse(name.at(-2)), 3);\nassert.equal(Segment.parse(name.at(-1)), 0);\n\n// Or you can use component.as().\nassert.equal(name.at(-3).as(Keyword), \"metadata\");\nassert.equal(name.at(-2).as(Version), 3);\nassert.equal(name.at(-1).as(Segment), 0);\n\n// If you need alternate URI syntax, use AltUri.ofName() or AltUri.ofComponent().\n// Make sure you are importing AltUri from this package, not from @ndn/packet package.\nassert.equal(AltUri.ofName(name), \"/A/32=metadata/v=3/seg=0\");\nassert.equal(AltUri.ofComponent(name.at(2)), \"v=3\");\n// This feature is not in the regular component.toString() and name.toString() methods,\n// because not every application would adopt this particular set of naming conventions.\n// It is incorrect to interpret \"54=%03\" as \"version 3\" everywhere, because in some applications\n// it could mean something completely different.\n// Using AltUri from this package indicates you have adopted these naming conventions.\n\n// Use AltUri.parseName() and AltUri.parseComponent() to parse from alternate URI syntax.\nassert(AltUri.parseName(\"/A/32=metadata/v=3/seg=0\").equals(name));\nassert(AltUri.parseComponent(\"v=3\").equals(name.at(2)));\n```\n\nThis package also implements **rev2 format**, as specified in [NDN-TR-0022 revision 2](https://named-data.net/publications/techreports/ndn-tr-22-2-ndn-memo-naming-conventions/) and [Name Component Type Assignment rev17](https://redmine.named-data.net/projects/ndn-tlv/wiki/NameComponentType/17), published in 2019.\nImport `Segment2`, `ByteOffset2`, `Version2`, `Timestamp2`, `SequenceNum2`, `AltUri2` to access this format.\nYou should not use this outdated and obsolete format in new applications, except for accessing old data.\n"
}