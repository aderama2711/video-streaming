import { asDataView, fromUtf8 } from "@ndn/util";
import { NNI } from "./nni_node.js";
class DecodedTlv {
    constructor(type, buf, offsetT, offsetV, offsetE) {
        this.type = type;
        this.buf = buf;
        this.offsetT = offsetT;
        this.offsetV = offsetV;
        this.offsetE = offsetE;
    }
    get length() {
        return this.offsetE - this.offsetV;
    }
    get value() {
        return this.buf.subarray(this.offsetV, this.offsetE);
    }
    get tlv() {
        return this.buf.subarray(this.offsetT, this.offsetE);
    }
    get size() {
        return this.offsetE - this.offsetT;
    }
    get decoder() {
        return new Decoder(this.tlv);
    }
    get vd() {
        return new Decoder(this.value);
    }
    get nni() {
        return NNI.decode(this.value);
    }
    get nniBig() {
        return NNI.decode(this.value, { big: true });
    }
    get text() {
        return fromUtf8(this.value);
    }
    get before() {
        return this.buf.subarray(0, this.offsetT);
    }
    get after() {
        return this.buf.subarray(this.offsetE);
    }
}
/** TLV decoder. */
export class Decoder {
    constructor(input) {
        this.input = input;
        this.offset = 0;
        this.dv = asDataView(input);
    }
    /** Determine whether end of input has been reached. */
    get eof() {
        return this.offset >= this.input.length;
    }
    /** Read TLV structure. */
    read() {
        const offsetT = this.offset;
        const type = this.readType();
        const length = this.readLength();
        const offsetV = this.offset;
        this.skipValue(length);
        const offsetE = this.offset;
        return new DecodedTlv(type, this.input, offsetT, offsetV, offsetE);
    }
    /** Read a Decodable object. */
    decode(d) {
        return d.decodeFrom(this);
    }
    readVarNum() {
        if (this.eof) {
            return undefined;
        }
        switch (this.input[this.offset]) {
            case 0xFD:
                this.offset += 3;
                if (this.offset > this.input.length) {
                    return undefined;
                }
                return this.dv.getUint16(this.offset - 2);
            case 0xFE:
                this.offset += 5;
                if (this.offset > this.input.length) {
                    return undefined;
                }
                return this.dv.getUint32(this.offset - 4);
            case 0xFF:
                // JavaScript cannot reliably represent 64-bit integers
                return undefined;
            default:
                this.offset += 1;
                return this.input[this.offset - 1];
        }
    }
    readType() {
        const n = this.readVarNum();
        if (n === undefined) {
            throw new Error(`TLV-TYPE is missing near offset ${this.offset}`);
        }
        return n;
    }
    readLength() {
        const n = this.readVarNum();
        if (n === undefined) {
            throw new Error(`TLV-LENGTH is missing near offset ${this.offset}`);
        }
        return n;
    }
    skipValue(length) {
        this.offset += length;
        if (this.offset > this.input.length) {
            throw new Error(`TLV-VALUE is incomplete near offset ${this.offset}`);
        }
    }
}
