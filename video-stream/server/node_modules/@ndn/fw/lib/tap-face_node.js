import { __importDefault, __importStar } from "tslib";
import { assert } from "@ndn/util";
import _cjsDefaultImport0 from "it-pushable"; const pushable = __importDefault(_cjsDefaultImport0).default;
import _cjsDefaultImport1 from "mnemonist/default-weak-map.js"; const DefaultWeakMap = __importDefault(_cjsDefaultImport1).default;
import _cjsDefaultImport2 from "mnemonist/multi-map.js"; const MultiMap = __importDefault(_cjsDefaultImport2).default;
import { Forwarder } from "./forwarder_node.js";
class TapRxController {
    constructor(fw) {
        this.fw = fw;
        this.taps = new MultiMap(Set);
        this.facerm = (src) => {
            const dst = this.taps.get(src);
            if (dst) {
                for (const { rx } of dst) {
                    rx.end();
                }
            }
            this.detachIfIdle();
        };
        this.pktrx = (src, pkt) => {
            const dst = this.taps.get(src);
            if (dst) {
                for (const { rx } of dst) {
                    rx.push(pkt);
                }
            }
        };
        this.fw.on("pktrx", this.pktrx);
        this.fw.on("facerm", this.facerm);
    }
    static lookup(fw) {
        return TapRxController.instances.get(fw);
    }
    add(src, dst) {
        assert.equal(src.fw, this.fw);
        this.taps.set(src, dst);
    }
    remove(src, dst) {
        this.taps.remove(src, dst);
        this.detachIfIdle();
    }
    detachIfIdle() {
        if (this.taps.size === 0) {
            this.fw.off("pktrx", this.pktrx);
            this.fw.off("facerm", this.facerm);
            TapRxController.instances.delete(this.fw);
        }
    }
}
TapRxController.instances = new DefaultWeakMap((fw) => new TapRxController(fw));
/**
 * Create a secondary face by tapping on a primary face.
 *
 * TapFace is useful for sending in-band management commands to a specific neighbor, after being
 * added to a temporary secondary Forwarder. The TapFace shares the same transport as the primary
 * face, but allows independent FIB and PIT settings. The primary Forwarder will see RX packets,
 * but does not see TX packets.
 */
export class TapFace {
    constructor(face) {
        this.face = face;
        this.rx = pushable();
        this.tx = async (iterable) => {
            for await (const pkt of iterable) {
                this.face.send(pkt);
            }
            this.ctrl.remove(this.face, this);
        };
        this.ctrl = TapRxController.lookup(face.fw);
        this.ctrl.add(this.face, this);
    }
    get attributes() {
        return {
            describe: `tap(${this.face})`,
            ...this.face.attributes,
        };
    }
}
(function (TapFace) {
    /** Create a new Forwarder and add a TapFace. */
    function create(face) {
        const fw = Forwarder.create();
        return fw.addFace(new TapFace(face));
    }
    TapFace.create = create;
})(TapFace || (TapFace = {}));
