import { type Name } from "@ndn/packet";
import { type SegmentConvention, type VersionConvention } from "./convention";
import { fetch } from "./fetch/mod";
/** Discover version with CanBePrefix. */
export declare function discoverVersion(name: Name, { endpoint, describe, versionConvention, segmentNumConvention, conventions: conventionsInput, expectedSuffixLen, modifyInterest, retxLimit, signal, verifier, }?: discoverVersion.Options): Promise<discoverVersion.Result>;
export declare namespace discoverVersion {
    const ANY_SUFFIX_LEN: unique symbol;
    interface Options extends fetch.Options {
        /**
         * Choose a version naming convention.
         * Default is Version from @ndn/naming-convention2 package.
         */
        versionConvention?: VersionConvention;
        /**
         * List of acceptable version+segment naming convention combinations.
         * If this is specified and non-empty, it overrides versionConvention,segmentNumConvention.
         */
        conventions?: ReadonlyArray<[VersionConvention, SegmentConvention]>;
        /**
         * Expected number of suffix components, including Version and Segment.
         * Minimum and default are 2, i.e. Version and Segment components.
         * ANY_SUFFIX_LEN allows any suffix length.
         */
        expectedSuffixLen?: number | typeof ANY_SUFFIX_LEN;
    }
    type Result = Name & {
        /** Recognized version naming convention. */
        versionConvention: VersionConvention;
        /** Recognized segment number naming convention. */
        segmentNumConvention: SegmentConvention;
    };
}
