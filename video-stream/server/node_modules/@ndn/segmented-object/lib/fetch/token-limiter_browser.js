import { assert } from "@ndn/util";
/** A token-based throttle limiter. */
export class TokenLimiter {
    constructor(capacity_ = 0) {
        this.capacity_ = capacity_;
        this.queue = new Set();
        this.nTaken_ = 0;
    }
    get nWaiting() { return this.queue.size; }
    get nTaken() { return this.nTaken_; }
    get capacity() { return this.capacity_; }
    /** Change total number of tokens. */
    set capacity(v) {
        assert(v >= 0);
        this.capacity_ = Math.trunc(v);
        this.unblock();
    }
    /** Wait to take a token. */
    take() {
        return new Promise((resolve) => {
            this.queue.add(resolve);
            this.unblock();
        });
    }
    /** Return one or more tokens. */
    put(n = 1) {
        this.nTaken_ -= n;
        this.unblock();
    }
    unblock() {
        for (const fulfill of this.queue) {
            if (this.nTaken_ >= this.capacity_) {
                break;
            }
            ++this.nTaken_;
            this.queue.delete(fulfill);
            fulfill();
        }
    }
}
