const defaultParameters = {
    k: 4,
    alpha: 1 / 8,
    beta: 1 / 4,
    initRto: 1000,
    minRto: 200,
    maxRto: 60000,
};
/**
 * RTT estimator.
 * @see https://tools.ietf.org/html/rfc6298
 */
export class RttEstimator {
    constructor(opts = {}) {
        this.sRtt_ = Number.NaN;
        this.rttVar = Number.NaN;
        this.params = { ...defaultParameters, ...opts };
        this.rto_ = this.params.initRto;
    }
    get sRtt() { return this.sRtt_; }
    get rto() { return this.rto_; }
    push(rtt, nPending = 1) {
        nPending = Math.max(nPending, 1);
        if (Number.isNaN(this.rttVar)) {
            this.sRtt_ = rtt;
            this.rttVar = rtt / 2;
        }
        else {
            const alpha = this.params.alpha / nPending;
            const beta = this.params.beta / nPending;
            this.rttVar = (1 - beta) * this.rttVar + beta * Math.abs(this.sRtt_ - rtt);
            this.sRtt_ = (1 - alpha) * this.sRtt_ + alpha * rtt;
        }
        this.rto_ = this.clampRto(this.sRtt_ + this.params.k * this.rttVar);
    }
    backoff() {
        this.rto_ = this.clampRto(this.rto_ * 2);
    }
    clampRto(rto) {
        return Math.max(this.params.minRto, Math.min(rto, this.params.maxRto));
    }
}
