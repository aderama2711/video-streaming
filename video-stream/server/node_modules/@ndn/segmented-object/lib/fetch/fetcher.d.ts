import { Endpoint } from "@ndn/endpoint";
import { type Name, type Verifier, Data, Interest } from "@ndn/packet";
import type TypedEmitter from "typed-emitter";
import { type SegmentConvention } from "../convention";
import { FetchLogic } from "./logic";
declare type Events = {
    /** Emitted when a Data segment arrives. */
    segment: (seg: Fetcher.SegmentData) => void;
    /** Emitted after all data chunks arrive. */
    end: () => void;
    /** Emitted upon error. */
    error: (err: Error) => void;
};
declare const Fetcher_base: new () => TypedEmitter<Events>;
/** Fetch Data packets as guided by FetchLogic. */
export declare class Fetcher extends Fetcher_base {
    private readonly name;
    private readonly opts;
    /** Number of segments retrieved so far. */
    get count(): number;
    private count_;
    private readonly logic;
    private readonly face;
    constructor(name: Name, opts: Fetcher.Options);
    close(): void;
    pause(): () => void;
    private tx;
    private readonly rx;
    private handleData;
    private fail;
    private readonly handleAbort;
}
export declare namespace Fetcher {
    interface Options extends FetchLogic.Options {
        /** Use the specified endpoint instead of the default. */
        endpoint?: Endpoint;
        /** FwFace description. */
        describe?: string;
        /**
         * Choose a segment number naming convention.
         * Default is Segment from @ndn/naming-convention2 package.
         */
        segmentNumConvention?: SegmentConvention;
        /**
         * Modify Interest according to specified options.
         * This can also be used to witness Interests without modification.
         */
        modifyInterest?: Interest.Modify;
        /** AbortSignal that allows canceling the Interest via AbortController. */
        signal?: AbortSignal;
        /**
         * InterestLifetime added to RTO.
         * Default is 1000ms.
         * Ignored if `lifetime` is set.
         */
        lifetimeAfterRto?: number;
        /** If specified, verify received Data. */
        verifier?: Verifier;
    }
    interface SegmentData {
        segNum: number;
        data: Data;
    }
}
export {};
