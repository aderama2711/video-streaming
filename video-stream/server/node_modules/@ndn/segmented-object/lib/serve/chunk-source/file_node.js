import { __importDefault, __importStar } from "tslib";
import _cjsDefaultImport0 from "graceful-fs"; const { promises: fs } = __importStar(_cjsDefaultImport0);
import _cjsDefaultImport1 from "p-lazy"; const PLazy = __importDefault(_cjsDefaultImport1).default;
import { getMaxChunkSize, KnownSizeChunkSource } from "./common_node.js";
class FileHandleChunkSource extends KnownSizeChunkSource {
    constructor(fh, chunkSize, totalSize) {
        super(chunkSize, totalSize);
        this.fh = fh;
    }
    async getPayload(i, offset, chunkSize) {
        void i;
        const payload = new Uint8Array(chunkSize);
        await this.fh.read(payload, 0, chunkSize, offset);
        return payload;
    }
    async close() {
        await this.fh.close();
    }
}
/**
 * Generate chunks from a file.
 *
 * Warning: modifying the file while FileChunkSource is active may cause undefined behavior.
 */
export class FileChunkSource {
    constructor(path, opts = {}) {
        const chunkSize = getMaxChunkSize(opts);
        this.opening = PLazy.from(async () => {
            const fh = await fs.open(path, "r");
            const { size } = await fh.stat();
            return new FileHandleChunkSource(fh, chunkSize, size);
        });
    }
    /* istanbul ignore next: not used when getChunk is present */
    async *listChunks() {
        const h = await this.opening;
        yield* h.listChunks();
    }
    async getChunk(i) {
        const h = await this.opening;
        return h.getChunk(i);
    }
    async close() {
        const h = await this.opening;
        await h.close();
    }
}
