export class KnownSizeChunkSource {
    constructor(chunkSize, totalSize) {
        this.chunkSize = chunkSize;
        this.totalSize = totalSize;
        this.finalChunkSize = totalSize % chunkSize;
        this.final = (totalSize - this.finalChunkSize) / chunkSize;
        if (this.finalChunkSize === 0 && totalSize > 0) {
            this.finalChunkSize = chunkSize;
            this.final -= 1;
        }
    }
    /* istanbul ignore next: not used when getChunk is present */
    async *listChunks() {
        for (let i = 0; i <= this.final; ++i) {
            yield this.makeChunk(i);
        }
    }
    async getChunk(i) {
        if (i > this.final) {
            return undefined;
        }
        return this.makeChunk(i);
    }
    async makeChunk(i) {
        const payload = await this.getPayload(i, i * this.chunkSize, i === this.final ? this.finalChunkSize : this.chunkSize);
        return {
            i,
            final: this.final,
            payload,
        };
    }
}
export function getMinChunkSize(opts) {
    return opts.minChunkSize ?? opts.chunkSize ?? 64;
}
export function getMaxChunkSize(opts) {
    return opts.maxChunkSize ?? opts.chunkSize ?? 4096;
}
