import { Endpoint } from "@ndn/endpoint";
import { Interest } from "@ndn/packet";
import { defaultSegmentConvention, defaultVersionConvention } from "./convention_node.js";
/** Discover version with CanBePrefix. */
export async function discoverVersion(name, { endpoint = new Endpoint(), describe, versionConvention = defaultVersionConvention, segmentNumConvention = defaultSegmentConvention, conventions: conventionsInput = [], expectedSuffixLen = 2, modifyInterest, retxLimit = 2, signal, verifier, } = {}) {
    const conventions = conventionsInput.length > 0 ? conventionsInput : [[versionConvention, segmentNumConvention]];
    const interest = new Interest(name, Interest.CanBePrefix, Interest.MustBeFresh);
    const data = await endpoint.consume(interest, {
        describe: describe ?? `discoverVersion(${name})`,
        modifyInterest,
        retx: retxLimit,
        signal,
        verifier,
    });
    const vComp = data.name.get(-2);
    const sComp = data.name.get(-1);
    let conventionIndex;
    if ((expectedSuffixLen !== discoverVersion.ANY_SUFFIX_LEN &&
        data.name.length !== name.length + expectedSuffixLen) ||
        (conventionIndex = conventions.findIndex(([v, s]) => v.match(vComp) && s.match(sComp))) < 0) {
        throw new Error(`cannot extract version from ${data.name}`);
    }
    return Object.defineProperties(data.name.getPrefix(-1), {
        versionConvention: { value: conventions[conventionIndex][0] },
        segmentNumConvention: { value: conventions[conventionIndex][1] },
    });
}
(function (discoverVersion) {
    discoverVersion.ANY_SUFFIX_LEN = Symbol("discoverVersion.ANY_SUFFIX_LEN");
})(discoverVersion || (discoverVersion = {}));
